{
    "available-preprocess": [
        {
            "name": "StandardScaler",
            "params": [
                {"name": "copy", "default": "True", "dtype": "bool", "comment": "Whether to make a copy of the input data."},
                {"name": "with_mean", "default": "True", "dtype": "bool", "comment": "Whether to center the data before scaling."},
                {"name": "with_std", "default": "True", "dtype": "bool", "comment": "Whether to scale the data to unit variance."}
            ]
        },
        {
            "name": "MinMaxScaler",
            "params": [
                {"name": "feature_range", "default": "(0, 1)", "dtype": "tuple", "comment": "The desired range of transformed data."},
                {"name": "copy", "default": "True", "dtype": "bool", "comment": "Whether to make a copy of the input data."},
                {"name": "clip", "default": "False", "dtype": "bool", "comment": "Whether to clip the transformed data to the feature range."}
            ]
        },
        {
            "name": "RobustScaler",
            "params": [
                {"name": "with_centering", "default": "True", "dtype": "bool", "comment": "Whether to center the data before scaling."},
                {"name": "with_scaling", "default": "True", "dtype": "bool", "comment": "Whether to scale the data according to the interquartile range."},
                {"name": "copy", "default": "True", "dtype": "bool", "comment": "Whether to make a copy of the input data."},
                {"name": "quantile_range", "default": "(25.0, 75.0)", "dtype": "tuple", "comment": "The interquartile range used to scale the data."},
                {"name": "unit_variance", "default": "False", "dtype": "bool", "comment": "Whether to ensure unit variance of the scaled data."}
            ]
        },
        {
            "name": "Normalizer",
            "params": [
                {"name": "norm", "default": "l2", "dtype": "string", "comment": "The normalization norm to use."},
                {"name": "copy", "default": "True", "dtype": "bool", "comment": "Whether to make a copy of the input data."}
            ]
        },
        {
            "name": "SimpleImputer",
            "params": [
                {"name": "missing_values", "default": "NaN", "comment": "The placeholder for missing values."},
                {"name": "strategy", "default": "mean", "dtype": "string", "comment": "The imputation strategy to use."},
                {"name": "fill_value", "default": "None", "comment": "The fill value for constant imputation."},
                {"name": "copy", "default": "True", "dtype": "bool", "comment": "Whether to make a copy of the input data."},
                {"name": "add_indicator", "default": "False", "dtype": "bool", "comment": "Whether to add a binary indicator for missing values."},
                {"name": "keep_empty_features", "default": "False", "dtype": "bool", "comment": "Whether to keep empty features in the transformed data."}
            ]
        },
        {
            "name": "OneHotEncoder",
            "params": [
                {"name": "handle_unknown", "default": "ignore", "dtype": "string", "comment": "Strategy to handle unknown categories."},
                {"name": "categories", "default": "auto", "dtype": "string", "comment": "Categories to use for encoding."},
                {"name": "drop", "default": "None", "dtype": "string", "comment": "Categories to drop for each feature."},
                {"name": "sparse", "default": "True", "dtype": "bool", "comment": "Will return sparse matrix if set True else will return an array.", "deprecated": "since version 1.2. Use sparse_output instead."},
                {"name": "sparse_output", "default": "True", "dtype": "bool", "comment": "Whether to return sparse output."},
                {"name": "min_frequency", "default": "None", "dtype": "float", "comment": "The minimum frequency a category should have to be kept."},
                {"name": "max_categories", "default": "None", "dtype": "int", "comment": "Maximum number of categories to encode."},
                {"name": "feature_name_combiner", "default": "concat", "dtype": "string", "comment": "The strategy to combine feature names in case of multicolumn output."}
            ]
        },
        {
            "name": "OrdinalEncoder",
            "params": [
                {"name": "categories", "default": "'auto'", "dtype": "'auto' or a list of array-like", "comment": "Categories (unique values) per feature. 'auto' determines categories automatically from the training data. If a list is provided, categories[i] holds the categories expected in the ith column. The passed categories should not mix strings and numeric values and should be sorted in case of numeric values. The used categories can be found in the categories_ attribute."},
                {"name": "dtype", "default": "np.float64", "dtype": "number type", "comment": "Desired dtype of output."},
                {"name": "handle_unknown", "default": "'error'", "dtype": "'error' or 'use_encoded_value'", "comment": "When set to 'error', an error will be raised if an unknown categorical feature is present during transform. When set to 'use_encoded_value', the encoded value of unknown categories will be set to the value given for the parameter unknown_value."},
                {"name": "unknown_value", "default": "None", "dtype": "int or np.nan", "comment": "When handle_unknown is set to 'use_encoded_value', this parameter is required and sets the encoded value of unknown categories. It must be distinct from the values used to encode any of the categories in fit. If set to np.nan, the dtype parameter must be a float dtype."},
                {"name": "encoded_missing_value", "default": "np.nan", "dtype": "int or np.nan", "comment": "Encoded value of missing categories. If set to np.nan, then the dtype parameter must be a float dtype."},
                {"name": "min_frequency", "default": "None", "dtype": "int or float", "comment": "Specifies the minimum frequency below which a category will be considered infrequent. If int, categories with a smaller cardinality will be considered infrequent. If float, categories with a smaller cardinality than min_frequency * n_samples will be considered infrequent. New in version 1.3: Read more in the User Guide."},
                {"name": "max_categories", "default": "None", "dtype": "int", "comment": "Specifies an upper limit to the number of output categories for each input feature when considering infrequent categories. If there are infrequent categories, max_categories includes the category representing the infrequent categories along with the frequent categories. If None, there is no limit to the number of output features. New in version 1.3: Read more in the User Guide."}
            ]
        },
        {
            "name": "LabelEncoder",
            "params": [
                {"name": "categories", "default": "auto", "dtype": "'auto' or a list of array-like", "comment": "Categories (unique values) per feature. 'auto' determines categories automatically from the training data. If a list is provided, categories[i] holds the categories expected in the ith column. The passed categories should not mix strings and numeric values and should be sorted in case of numeric values. The used categories can be found in the categories_ attribute."},
                {"name": "dtype", "default": "np.float64", "dtype": "number type", "comment": "Desired dtype of output."},
                {"name": "handle_unknown", "default": "'error'", "dtype": "'error' or 'use_encoded_value'", "comment": "When set to 'error', an error will be raised if an unknown categorical feature is present during transform. When set to 'use_encoded_value', the encoded value of unknown categories will be set to the value given for the parameter unknown_value."},
                {"name": "unknown_value", "default": "None", "dtype": "int or np.nan", "comment": "When handle_unknown is set to 'use_encoded_value', this parameter is required and sets the encoded value of unknown categories. It must be distinct from the values used to encode any of the categories in fit. If set to np.nan, the dtype parameter must be a float dtype."},
                {"name": "encoded_missing_value", "default": "np.nan", "dtype": "int or np.nan", "comment": "Encoded value of missing categories. If set to np.nan, then the dtype parameter must be a float dtype."},
                {"name": "min_frequency", "default": "None", "dtype": "int or float", "comment": "Specifies the minimum frequency below which a category will be considered infrequent. If int, categories with a smaller cardinality will be considered infrequent. If float, categories with a smaller cardinality than min_frequency * n_samples will be considered infrequent. New in version 1.3: Read more in the User Guide."},
                {"name": "max_categories", "default": "None", "dtype": "int", "comment": "Specifies an upper limit to the number of output categories for each input feature when considering infrequent categories. If there are infrequent categories, max_categories includes the category representing the infrequent categories along with the frequent categories. If None, there is no limit to the number of output features. New in version 1.3: Read more in the User Guide."}
            ]
        },
        {
            "name": "PolynomialFeatures",
            "params": [
                {"name": "degree", "default": "2", "comment": "The degree of the polynomial features."},
                {"name": "interaction_only", "default": "False", "comment": "Whether to include only interaction features."},
                {"name": "include_bias", "default": "True", "comment": "Whether to include a bias column of ones."},
                {"name": "order", "default": "'C'", "dtype": "array", "comment": "Order of output array in the dense case. 'F' order is faster to compute, but may slow down subsequent estimators."}
            ]
        }
    ]
}