{
    "available-model": [
        {
            "name": "linear regression",
            "task": "Regression",
            "data": "Supervised, numerical data",
            "params": {
                "fit_intercept": {"dtype": "bool"},
                "positive": {"dtype": "bool"},
                "copy_X": {"dtype": "bool"},
                "n_jobs": {"dtype": "int"}
            },
            "return": {
                "coef_": {"dtype": "array"},
                "intercept_": {"dtype": "float"}
            }
        },
        {
            "name": "logistic regression",
            "task": "Classification",
            "data": "Supervised, numerical data",
            "params": {
                "C": {"dtype": "float"},
                "penalty": {"dtype": "str"},
                "dual": {"dtype": "bool"},
                "tol": {"dtype": "float"},
                "fit_intercept": {"dtype": "bool"},
                "intercept_scaling": {"dtype": "float"},
                "class_weight": {"dtype": "dict"},
                "random_state": {"dtype": "int"},
                "solver": {"dtype": "str"}
            },
            "return": {
                "coef_": {"dtype": "array"},
                "intercept_": {"dtype": "float"}
            }
        },
        {
            "name": "ridge regression",
            "task": "Regression",
            "data": "Supervised, numerical data",
            "params": {
                "alpha": {"dtype": "float"},
                "fit_intercept": {"dtype": "bool"},
                "solver": {"dtype": "str"},
                "copy_X": {"dtype": "bool"},
                "max_iter": {"dtype": "int"},
                "tol": {"dtype": "float"},
                "positive": {"dtype": "bool"},
                "random_state": {"dtype": "int"}
            },
            "return": {
                "coef_": {"dtype": "array"},
                "intercept_": {"dtype": "float"}
            }
        },
        {
            "name": "lasso regression",
            "task": "Regression",
            "data": "Supervised, numerical data",
            "params": {
                "alpha": {"dtype": "float"},
                "fit_intercept": {"dtype": "bool"},
                "precompute": {"dtype": "bool"},
                "copy_X": {"dtype": "bool"},
                "max_iter": {"dtype": "int"},
                "tol": {"dtype": "float"},
                "warm_start": {"dtype": "bool"},
                "positive": {"dtype": "bool"},
                "random_state": {"dtype": "int"},
                "selection": {"dtype": "str (cyclic, random)"}
            },
            "return": {
                "coef_": {"dtype": "array"},
                "intercept_": {"dtype": "float"}
            }
        },
        {
            "name": "svm",
            "task": "Both",
            "data": "Supervised, numerical data",
            "params": {
                "C": {"dtype": "float"},//integer
                "kernel": {"dtype": "str"},
                "gamma": {"dtype": "float"},
                "degree": {"dtype": "int"},
                "coef": {"dtype": "float"},
                "shrinking": {"dtype": "bool"},
                "probability": {"dtype": "bool"},
                "tol": {"dtype": "float"},
                "cache_size": {"dtype": "float"},
                "class_weight": {"dtype": "dict"},
                "verbose": {"dtype": "bool"},
                "max_iter": {"dtype": "int"},
                "decision_function_shape": {"dtype": "str (ov o, ovr)"}
            },
            "return": {
                "support_": {"dtype": "array"},
                "dual_coef_": {"dtype": "array"},
                "intercept_": {"dtype": "array"}
            }
        },
        {
            "name": "decision tree",
            "task": "Regression",
            "data": "Supervised, numerical data",
            "params": {
                "criterion": {"dtype": "str"},
                "max_depth": {"dtype": "int"},
                "min_samples_split": {"dtype": "int"},
                "min_samples_leaf": {"dtype": "int or float"},
                "min_weight_fraction_leaf": {"dtype": "int or float"},
                "max_features": {"dtype": "int or float"},
                "random_state": {"dtype": "int"},
                "min_impurity_decrease": {"dtype": "float"},
                "class_weight": {"dtype": "dict"},
                "ccp_alpha": {"dtype": "non-negative float"}
            },
            "return": {
                "predict": {"dtype": "array"},
                "predict_proba": {"dtype": "array"},
                "max_leaf_nodes": {"dtype": "int"}
            }
        },
        {
            "name": "decision tree classification",
            "task": "Classification",
            "data": "Supervised, binary data",
            "params": {
                "criterion": {"dtype": "str"},
                "max_depth": {"dtype": "int"},
                "min_samples_split": {"dtype": "int"},
                "min_samples_leaf": {"dtype": "int or float"},
                "min_weight_fraction_leaf": {"dtype": "int or float"},
                "max_features": {"dtype": "int or float"},
                "random_state": {"dtype": "int"},
                "max_leaf_nodes": {"dtype": "int"},
                "min_impurity_decrease": {"dtype": "float"},
                "class_weight": {"dtype": "dict"},
                "ccp_alpha": {"dtype": "non-negative float"}
            },
            "return": {
                "predict": {"dtype": "array"},
                "predict_proba": {"dtype": "array"},
                "max_leaf_nodes": {"dtype": "int"}
            }
        },
        {
            "name": "random forest",
            "task": "Regression",
            "data": "Supervised, numerical data",
            "params": {
                "n_estimators": {"dtype": "int"},
                "max_depth": {"dtype": "int"},
                "criterion": {"dtype": "str"},
                "min_samples_split": {"dtype": "int or float"},
                "min_samples_leaf": {"dtype": "int or float"},
                "min_weight_fraction_leaf": {"dtype": "float"},
                "max_features": {"dtype": "int or float"},
                "max_leaf_nodes": {"dtype": "int"},
                "min_impurity_decrease": {"dtype": "float"},
                "bootstrap": {"dtype": "bool"},
                "oob_score": {"dtype": "bool"},
                "n_jobs": {"dtype": "int"},
                "random_state": {"dtype": "int"},
                "verbose": {"dtype": "int"},
                "warm_start": {"dtype": "bool"},
                "class_weight": {"dtype": "dict"},
                "ccp_alpha": {"dtype": "non-negative float"},
                "max_samples": {"dtype": "int"}
            },
            "return": {
                "predict": {"dtype": "array"},
                "predict_proba": {"dtype": "array"}
            }
        },
        {
            "name": "random forest classification",
            "task": "Classification",
            "data": "Supervised, binary data",
            "params": {
                "n_estimators": {"dtype": "int"},
                "max_depth": {"dtype": "int"},
                "criterion": {"dtype": "str"},
                "min_samples_split": {"dtype": "int or float"},
                "min_samples_leaf": {"dtype": "int or float"},
                "min_weight_fraction_leaf": {"dtype": "float"},
                "max_features": {"dtype": "int or float"},
                "max_leaf_nodes": {"dtype": "int"},
                "min_impurity_decrease": {"dtype": "float"},
                "bootstrap": {"dtype": "bool"},
                "oob_score": {"dtype": "bool"},
                "n_jobs": {"dtype": "int"},
                "random_state": {"dtype": "int"},
                "verbose": {"dtype": "int"},
                "warm_start": {"dtype": "bool"},
                "class_weight": {"dtype": "dict"},
                "ccp_alpha": {"dtype": "non-negative float"},
                "max_samples": {"dtype": "int"}
            },
            "return": {
                "predict": {"dtype": "array"},
                "predict_proba": {"dtype": "array"}
            }
        },
        {
            "name": "knn regression",
            "task": "Regression",
            "data": "Supervised, numerical data",
            "params": {
                "n_neighbors": {"dtype": "int"},
                "weights": {"dtype": "str"},
                "algorithm": {"dtype": "str"},
                "leaf_size": {"dtype": "int"},
                "p": {"dtype": "float"},
                "metric": {"dtype": "str"},
                "metric_params": {"dtype": "dict"},
                "n_jobs": {"dtype": "int"}
            },
            "return": {
                "predict": {"dtype": "array"}
            }
        },
        {
            "name": "knn classification",
            "task": "Classification",
            "data": "Supervised, binary data",
            "params": {
                "n_neighbors": {"dtype": "int"},
                "weights": {"dtype": "str"},
                "algorithm": {"dtype": "str"},
                "leaf_size": {"dtype": "int"},
                "p": {"dtype": "float"},
                "metric": {"dtype": "str"},
                "metric_params": {"dtype": "dict"},
                "n_jobs": {"dtype": "int"}
            },
            "return": {
                "predict": {"dtype": "array"},
                "predict_proba": {"dtype": "array"}
            }
        },
        {
            "name": "k means clustering",
            "task": "Unsupervised",
            "data": "Numerical data",
            "params": {
                "n_clusters": {"dtype": "int"},
                "init": {"dtype": "str"},
                "n_init": {"dtype": "int"},
                "max_iter": {"dtype": "int"},
                "tol": {"dtype": "float"},
                "verbose": {"dtype": "int"},
                "random_state": {"dtype": "int"},
                "copy_x": {"dtype": "bool"}
            },
            "return": {
                "labels_": {"dtype": "array"},
                "cluster_centers_": {"dtype": "array"}
            }
        },
        {
            "name": "naïve bayes classification",
            "task": "Classification",
            "data": "Supervised, binary or multiclass data",
            "params": {
                "alpha": {"dtype": "smoothing parameter"},
                "priors": {"dtype": "n_classes"},
                "var_smoothing": {"dtype": "float"}
            },
            "return": {
                "class_log_prior_": {"dtype": "array"},
                "class_count_": {"dtype": "array"},
                "feature_count_": {"dtype": "array"}
            }
        },
        {
            "name": "gradient boosting regression",
            "task": "Regression",
            "data": "Supervised, numerical data",
            "params": {
                "n_estimators": {"dtype": "int"},
                "learning_rate": {"dtype": "float"},
                "max_depth": {"dtype": "int"},
                "min_samples_split": {"dtype": "int or float"},
                "min_samples_leaf": {"dtype": "int or float"},
                "max_features": {"dtype": "int, float, or {'auto', 'sqrt', 'log2'}"}
            },
            "return": {
                "estimators_": {"dtype": "array of objects"}
            }
        },
        {
            "name": "gradient boosting classification",
            "task": "Classification",
            "data": "Supervised, binary or multiclass data",
            "params": {
                "n_estimators": {"dtype": "int"},
                "learning_rate": {"dtype": "float"},
                "max_depth": {"dtype": "int"},
                "min_samples_split": {"dtype": "int or float"},
                "min_samples_leaf": {"dtype": "int or float"},
                "max_features": {"dtype": "int, float, or {'auto', 'sqrt', 'log2'}"}
            },
            "return": {
                "estimators_": {"dtype": "array of objects"}
            }
        },
        {
            "name": "xgboost regression",
            "task": "Regression",
            "data": "Supervised, numerical data",
            "params": {
                "n_estimators": {"dtype": "int"},
                "learning_rate": {"dtype": "float"},
                "max_depth": {"dtype": "int"},
                "min_samples_split": {"dtype": "int or float"},
                "min_samples_leaf": {"dtype": "int or float"},
                "max_features": {"dtype": "int, float, or {'auto', 'sqrt', 'log2'}"}
            },
            "return": {
                "Booster": {"dtype": "object"}
            }
        },
        {
            "name": "xgboost classification",
            "task": "Classification",
            "data": "Supervised, binary or multiclass data",
            "params": {
                "n_estimators": {"dtype": "int"},
                "learning_rate": {"dtype": "float"},
                "max_depth": {"dtype": "int"},
                "min_samples_split": {"dtype": "int or float"},
                "min_samples_leaf": {"dtype": "int or float"},
                "max_features": {"dtype": "int, float, or {'auto', 'sqrt', 'log2'}"}
            },
            "return": {
                "Booster": {"dtype": "object"}
            }
        },
        {
            "name": "dbscan clustering",
            "task": "Unsupervised",
            "data": "Numerical data",
            "params": {
                "eps": {"dtype": "float"},
                "min_samples": {"dtype": "int"},
                "metric": {"dtype": "str"},
                "metric_params": {"dtype": "dict"},
                "algorithm": {"dtype": "str"},
                "leaf_size": {"dtype": "int"},
                "p": {"dtype": "float"},
                "n_jobs": {"dtype": "int"}
            },
            "return": {
                "labels_": {"dtype": "array"}
            }
        },
        {
            "name": "birch algorithm",
            "task": "Clustering",
            "data": "Unsupervised, numerical data",
            "params": {
                "threshold": {"dtype": "float"},
                "branching_factor": {"dtype": "int"},
                "clusters": {"dtype": "int"}
            },
            "return": {
                "Set of clusters": {"dtype": "including centroids and covariance matrices"}
            }
        },
        {
            "name": "isolation forest",
            "task": "Clustering",
            "data": "Unsupervised, numerical and binary data",
            "params": {
                "n_estimators": {"dtype": "int"},
                "max_samples": {"dtype": "auto, int, float"},
                "contamination": {"dtype": "float or auto"},
                "max_features": {"dtype": "float"},
                "bootstrap": {"dtype": "bool"},
                "n_jobs": {"dtype": "int"},
                "random_state": {"dtype": "int"},
                "verbose": {"dtype": "int"},
                "warm_start": {"dtype": "bool"}
            },
            "return": {
                // "outliers_": {"dtype": "array"},
                // "decision_function_": {"dtype": "array"}
                "selected": {"dtype": "various parameters"}
            }
        }
    ]
}




